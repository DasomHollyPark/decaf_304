
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'A66C9209D93D31811C36F509941C4874'
    
_lr_action_items = {'ARITH_OP':([80,81,82,83,86,88,98,101,107,110,115,116,119,121,122,123,124,126,140,141,142,143,144,150,151,153,154,156,157,161,162,163,164,165,167,168,171,172,173,179,180,182,183,184,186,187,190,191,192,],[-59,-74,-58,-56,-60,-62,-61,-63,-64,-57,-82,-80,-69,-73,-76,148,-68,-81,-87,-89,-90,-88,148,148,148,148,-75,-78,148,148,148,-65,-2,-92,148,148,-66,-77,-79,-91,-2,-95,-93,148,-67,148,-96,-97,-94,]),'RETURN':([42,67,85,94,99,109,131,135,137,138,147,169,178,185,189,195,197,198,199,],[-20,77,-55,77,-54,-53,-50,-42,-51,-52,-49,77,77,-47,-45,77,-46,77,-48,]),'VOID':([10,12,13,14,15,16,17,18,19,20,22,25,26,31,42,68,71,74,111,112,113,135,],[-2,-2,-2,-16,-10,-12,-14,-19,-11,-15,30,-18,-17,-13,-20,-36,-35,-33,-37,-34,-32,-42,]),'RIGHT_BRACE':([13,15,16,19,21,23,24,31,42,67,68,71,74,85,91,94,95,99,109,111,112,113,131,134,135,137,138,147,185,189,197,199,],[-8,-10,-12,-11,27,35,-9,-13,-20,-2,-36,-35,-33,-55,-43,-2,135,-54,-53,-37,-34,-32,-50,-44,-42,-51,-52,-49,-47,-45,-46,-48,]),'RIGHT_BRACKET':([50,80,81,82,83,86,88,98,101,107,110,115,116,119,121,122,124,126,140,141,142,143,150,153,154,156,162,163,164,165,167,168,171,172,173,179,180,181,182,183,184,186,190,191,192,],[63,-59,-74,-58,-56,-60,-62,-61,-63,-64,-57,-82,-80,-69,-73,-76,-68,-81,-87,-89,-90,-88,-85,172,-75,-78,-86,-65,-2,-92,-83,-84,-66,-77,-79,-91,-2,191,-95,-93,192,-67,-96,-97,-94,]),'WHILE':([42,67,85,94,99,109,131,135,137,138,147,169,178,185,189,195,197,198,199,],[-20,78,-55,78,-54,-53,-50,-42,-51,-52,-49,78,78,-47,-45,78,-46,78,-48,]),'STATIC':([10,12,13,14,15,16,19,20,31,42,68,71,74,111,112,113,135,],[18,18,18,25,-10,-12,-11,26,-13,-20,-36,-35,-33,-37,-34,-32,-42,]),'FLOAT_CONST':([42,67,77,85,94,99,104,105,106,109,125,127,129,131,132,133,135,136,137,138,139,147,148,149,152,166,169,174,177,178,185,189,194,195,197,198,199,],[-20,110,110,-55,110,-54,110,110,110,-53,110,110,110,-50,110,110,-42,110,-51,-52,110,-49,110,110,110,110,110,110,110,110,-47,-45,110,110,-46,110,-48,]),'NEW':([42,67,77,85,94,99,104,105,106,109,125,127,129,131,132,133,135,136,137,138,139,147,148,149,152,166,169,174,177,178,185,189,194,195,197,198,199,],[-20,79,117,-55,79,-54,79,79,117,-53,117,117,117,-50,117,79,-42,117,-51,-52,117,-49,117,117,117,117,79,117,117,79,-47,-45,79,79,-46,79,-48,]),'NULL':([42,67,77,85,94,99,104,105,106,109,125,127,129,131,132,133,135,136,137,138,139,147,148,149,152,166,169,174,177,178,185,189,194,195,197,198,199,],[-20,80,80,-55,80,-54,80,80,80,-53,80,80,80,-50,80,80,-42,80,-51,-52,80,-49,80,80,80,80,80,80,80,80,-47,-45,80,80,-46,80,-48,]),'TRUE':([42,67,77,85,94,99,104,105,106,109,125,127,129,131,132,133,135,136,137,138,139,147,148,149,152,166,169,174,177,178,185,189,194,195,197,198,199,],[-20,86,86,-55,86,-54,86,86,86,-53,86,86,86,-50,86,86,-42,86,-51,-52,86,-49,86,86,86,86,86,86,86,86,-47,-45,86,86,-46,86,-48,]),'DOT':([80,81,82,83,84,86,88,89,92,96,98,101,103,107,110,116,119,121,122,124,142,143,154,156,163,171,172,173,186,],[-59,-74,-58,-56,130,-60,-62,-69,-73,-76,-61,-63,-68,-64,-57,130,-69,-73,-76,-68,-68,-68,-75,-78,-65,-66,-77,-79,-67,]),'STRING_CONST':([42,67,77,85,94,99,104,105,106,109,125,127,129,131,132,133,135,136,137,138,139,147,148,149,152,166,169,174,177,178,185,189,194,195,197,198,199,],[-20,82,82,-55,82,-54,82,82,82,-53,82,82,82,-50,82,82,-42,82,-51,-52,82,-49,82,82,82,82,82,82,82,82,-47,-45,82,82,-46,82,-48,]),'INT_CONST':([42,67,77,85,94,99,104,105,106,109,125,127,129,131,132,133,135,136,137,138,139,147,148,149,152,166,169,174,177,178,185,189,194,195,197,198,199,],[-20,83,83,-55,83,-54,83,83,83,-53,83,83,83,-50,83,83,-42,83,-51,-52,83,-49,83,83,83,83,83,83,83,83,-47,-45,83,83,-46,83,-48,]),'SEMICOLON':([37,38,39,42,43,45,46,48,49,58,59,60,63,67,73,77,80,81,82,83,85,86,87,88,89,94,98,99,100,101,102,107,108,109,110,115,116,118,119,120,121,122,123,124,126,131,133,135,137,138,140,141,142,143,147,150,154,156,158,159,160,162,163,164,165,167,168,169,171,172,173,177,178,179,180,182,183,185,186,188,189,190,191,192,195,197,198,199,],[42,-2,-2,-20,-25,-26,-2,-28,-29,-2,-2,-30,-31,85,-27,-2,-59,-74,-58,-56,-55,-60,131,-62,-99,85,-61,-54,137,-63,138,-64,-98,-53,-57,-82,-80,147,-69,-102,-73,-76,-103,-68,-81,-50,-2,-42,-51,-52,-87,-89,-90,-88,-49,-85,-75,-78,-101,177,-100,-86,-65,-2,-92,-83,-84,85,-66,-77,-79,-2,85,-91,-2,-95,-93,-47,-67,194,-45,-96,-97,-94,85,-46,85,-48,]),'PRIVATE':([10,12,13,15,16,19,31,42,68,71,74,111,112,113,135,],[14,14,14,-10,-12,-11,-13,-20,-36,-35,-33,-37,-34,-32,-42,]),'BOOL_OP':([80,81,82,83,86,88,98,101,107,110,115,116,119,121,122,123,124,126,140,141,142,143,144,150,151,153,154,156,157,161,162,163,164,165,167,168,171,172,173,179,180,182,183,184,186,187,190,191,192,],[-59,-74,-58,-56,-60,-62,-61,-63,-64,-57,-82,-80,-69,-73,-76,149,-68,-81,-87,-89,-90,-88,149,149,149,149,-75,-78,149,149,149,-65,-2,-92,149,149,-66,-77,-79,-91,-2,-95,-93,149,-67,149,-96,-97,-94,]),'CONTINUE':([42,67,85,94,99,109,131,135,137,138,147,169,178,185,189,195,197,198,199,],[-20,102,-55,102,-54,-53,-50,-42,-51,-52,-49,102,102,-47,-45,102,-46,102,-48,]),'COMMA':([38,39,46,48,49,51,58,59,60,63,69,76,80,81,82,83,86,88,98,101,107,110,115,116,119,121,122,124,126,140,141,142,143,150,154,156,157,162,163,164,165,167,168,171,172,173,179,180,182,183,186,187,190,191,192,],[44,-2,-2,-28,-29,64,44,-2,-30,-31,-41,64,-59,-74,-58,-56,-60,-62,-61,-63,-64,-57,-82,-80,-69,-73,-76,-68,-81,-87,-89,-90,-88,-85,-75,-78,174,-86,-65,-2,-92,-83,-84,-66,-77,-79,-91,-2,-95,-93,-67,174,-96,-97,-94,]),'CLASS':([0,2,27,35,],[3,3,-5,-6,]),'MINUS_MINUS':([42,67,77,81,85,92,94,96,99,103,106,109,121,122,124,125,127,129,131,132,133,135,136,137,138,139,147,148,149,152,154,166,169,172,174,177,178,185,189,194,195,197,198,199,],[-20,104,104,-74,-55,-73,104,-76,-54,141,104,-53,-73,-76,141,104,104,104,-50,104,104,-42,104,-51,-52,104,-49,104,104,104,-75,104,104,-77,104,104,104,-47,-45,104,104,-46,104,-48,]),'$end':([0,1,2,4,5,6,27,35,],[-2,0,-2,-3,-1,-4,-5,-6,]),'FOR':([42,67,85,94,99,109,131,135,137,138,147,169,178,185,189,195,197,198,199,],[-20,93,-55,93,-54,-53,-50,-42,-51,-52,-49,93,93,-47,-45,93,-46,93,-48,]),'EQUALS':([81,92,96,103,121,122,124,154,172,],[-74,-73,-76,139,-73,-76,139,-75,-77,]),'ELSE':([42,85,99,109,131,135,137,138,147,185,189,197,199,],[-20,-55,-54,-53,-50,-42,-51,-52,-49,-47,195,-46,-48,]),'EXTENDS':([7,],[8,]),'RIGHT_PAR':([40,41,46,47,48,49,51,55,57,59,60,62,63,65,66,69,76,80,81,82,83,86,88,89,98,101,107,108,110,114,115,116,119,121,122,124,126,132,140,141,142,143,144,150,151,152,154,155,156,157,158,160,161,162,163,164,165,167,168,170,171,172,173,175,176,179,180,182,183,186,187,190,191,192,193,194,196,],[52,56,-2,61,-28,-29,-2,70,72,-2,-30,75,-31,-39,-38,-41,-2,-59,-74,-58,-56,-60,-62,-99,-61,-63,-64,-98,-57,-40,-82,-80,-69,-73,-76,-68,-81,156,-87,-89,-90,-88,163,-85,169,171,-75,173,-78,-2,-101,-100,178,-86,-65,-2,-92,-83,-84,186,-66,-77,-79,-70,-71,-91,-2,-95,-93,-67,-2,-96,-97,-94,-72,-2,198,]),'ID':([3,8,10,12,13,14,15,16,17,18,19,20,22,25,26,28,29,30,31,32,33,34,40,41,42,44,47,53,54,64,67,68,71,74,77,79,85,90,94,96,99,104,105,106,109,111,112,113,117,125,127,129,130,131,132,133,135,136,137,138,139,147,148,149,152,166,169,174,177,178,185,189,194,195,197,198,199,],[7,11,-2,-2,-2,-16,-10,-12,-14,-19,-11,-15,34,-18,-17,-22,-21,36,-13,-23,39,-24,54,54,-20,59,54,59,-24,54,96,-36,-35,-33,122,128,-55,59,96,-24,-54,122,122,122,-53,-37,-34,-32,146,122,122,122,154,-50,122,122,-42,122,-51,-52,122,-49,122,122,122,122,96,122,122,96,-47,-45,122,96,-46,96,-48,]),'IF':([42,67,85,94,99,109,131,135,137,138,147,169,178,185,189,195,197,198,199,],[-20,97,-55,97,-54,-53,-50,-42,-51,-52,-49,97,97,-47,-45,97,-46,97,-48,]),'FALSE':([42,67,77,85,94,99,104,105,106,109,125,127,129,131,132,133,135,136,137,138,139,147,148,149,152,166,169,174,177,178,185,189,194,195,197,198,199,],[-20,98,98,-55,98,-54,98,98,98,-53,98,98,98,-50,98,98,-42,98,-51,-52,98,-49,98,98,98,98,98,98,98,98,-47,-45,98,98,-46,98,-48,]),'INT':([10,12,13,14,15,16,17,18,19,20,22,25,26,31,40,41,42,47,64,67,68,71,74,85,94,99,109,111,112,113,117,131,135,137,138,147,169,178,185,189,195,197,198,199,],[-2,-2,-2,-16,-10,-12,-14,-19,-11,-15,29,-18,-17,-13,29,29,-20,29,29,29,-36,-35,-33,-55,29,-54,-53,-37,-34,-32,29,-50,-42,-51,-52,-49,29,29,-47,-45,29,-46,29,-48,]),'FLOAT':([10,12,13,14,15,16,17,18,19,20,22,25,26,31,40,41,42,47,64,67,68,71,74,85,94,99,109,111,112,113,117,131,135,137,138,147,169,178,185,189,195,197,198,199,],[-2,-2,-2,-16,-10,-12,-14,-19,-11,-15,28,-18,-17,-13,28,28,-20,28,28,28,-36,-35,-33,-55,28,-54,-53,-37,-34,-32,28,-50,-42,-51,-52,-49,28,28,-47,-45,28,-46,28,-48,]),'BREAK':([42,67,85,94,99,109,131,135,137,138,147,169,178,185,189,195,197,198,199,],[-20,100,-55,100,-54,-53,-50,-42,-51,-52,-49,100,100,-47,-45,100,-46,100,-48,]),'THIS':([42,67,77,85,94,99,104,105,106,109,125,127,129,131,132,133,135,136,137,138,139,147,148,149,152,166,169,174,177,178,185,189,194,195,197,198,199,],[-20,101,101,-55,101,-54,101,101,101,-53,101,101,101,-50,101,101,-42,101,-51,-52,101,-49,101,101,101,101,101,101,101,101,-47,-45,101,101,-46,101,-48,]),'BOOLEAN':([10,12,13,14,15,16,17,18,19,20,22,25,26,31,40,41,42,47,64,67,68,71,74,85,94,99,109,111,112,113,117,131,135,137,138,147,169,178,185,189,195,197,198,199,],[-2,-2,-2,-16,-10,-12,-14,-19,-11,-15,32,-18,-17,-13,32,32,-20,32,32,32,-36,-35,-33,-55,32,-54,-53,-37,-34,-32,32,-50,-42,-51,-52,-49,32,32,-47,-45,32,-46,32,-48,]),'UNARY_OP':([77,106,125,127,129,132,136,139,148,149,152,166,174,177,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'PLUS_PLUS':([42,67,77,81,85,92,94,96,99,103,106,109,121,122,124,125,127,129,131,132,133,135,136,137,138,139,147,148,149,152,154,166,169,172,174,177,178,185,189,194,195,197,198,199,],[-20,105,105,-74,-55,-73,105,-76,-54,140,105,-53,-73,-76,140,105,105,105,-50,105,105,-42,105,-51,-52,105,-49,105,105,105,-75,105,105,-77,105,105,105,-47,-45,105,105,-46,105,-48,]),'LEFT_PAR':([34,36,39,42,67,77,78,85,92,93,94,96,97,99,104,105,106,109,121,122,125,127,128,129,131,132,133,135,136,137,138,139,146,147,148,149,152,154,166,169,174,177,178,185,189,194,195,197,198,199,],[40,41,47,-20,106,106,127,-55,132,133,106,-76,136,-54,106,106,106,-53,132,-76,106,106,152,106,-50,106,106,-42,106,-51,-52,106,152,-49,106,106,106,-75,106,106,106,106,106,-47,-45,106,106,-46,106,-48,]),'LEFT_BRACKET':([28,29,32,39,46,59,63,80,81,82,83,84,86,88,89,92,96,98,101,103,107,110,116,119,121,122,124,142,143,145,146,154,156,163,164,165,171,172,173,180,183,186,191,192,],[-22,-21,-23,50,50,50,-31,-59,-74,-58,-56,129,-60,-62,-69,-73,-76,-61,-63,-68,-64,-57,129,-69,-73,-76,-68,-68,-68,166,-24,-75,-78,-65,181,166,-66,-77,-79,181,-93,-67,-97,-94,]),'SUPER':([42,67,77,85,94,99,104,105,106,109,125,127,129,131,132,133,135,136,137,138,139,147,148,149,152,166,169,174,177,178,185,189,194,195,197,198,199,],[-20,107,107,-55,107,-54,107,107,107,-53,107,107,107,-50,107,107,-42,107,-51,-52,107,-49,107,107,107,107,107,107,107,107,-47,-45,107,107,-46,107,-48,]),'PUBLIC':([10,12,13,15,16,19,31,42,68,71,74,111,112,113,135,],[20,20,20,-10,-12,-11,-13,-20,-36,-35,-33,-37,-34,-32,-42,]),'LEFT_BRACE':([7,9,11,42,52,56,61,67,70,72,75,85,94,99,109,131,135,137,138,147,169,178,185,189,195,197,198,199,],[10,12,-7,-20,67,67,67,67,67,67,67,-55,67,-54,-53,-50,-42,-51,-52,-49,67,67,-47,-45,67,-46,67,-48,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'new_array':([77,106,125,127,129,132,136,139,148,149,152,166,174,177,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'array_empty_star':([164,180,],[179,190,]),'array_dim':([39,46,59,],[46,46,46,]),'variables':([33,90,],[37,37,]),'constructor_decl':([10,12,13,],[16,16,16,]),'primary':([67,77,94,104,105,106,125,127,129,132,133,136,139,148,149,152,166,169,174,177,178,194,195,198,],[84,116,84,84,84,116,116,116,116,116,84,116,116,116,116,116,116,84,116,116,84,84,84,84,]),'array_dim_star':([39,46,59,],[48,60,48,]),'array_access':([67,77,94,104,105,106,125,127,129,132,133,136,139,148,149,152,166,169,174,177,178,194,195,198,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'formal_param':([40,41,47,64,],[51,51,51,76,]),'class_body_decl':([10,12,13,],[13,13,13,]),'arguments':([132,152,],[155,170,]),'array_empty':([164,180,],[180,180,]),'more_formals':([51,76,],[66,114,]),'stmt_expr':([67,94,133,169,178,194,195,198,],[87,87,158,87,87,158,87,87,]),'literal':([67,77,94,104,105,106,125,127,129,132,133,136,139,148,149,152,166,169,174,177,178,194,195,198,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'program':([0,],[1,]),'extends':([7,],[9,]),'class_decl':([0,2,],[2,2,]),'class_body_decl_plus':([10,12,13,],[21,23,24,]),'type':([22,40,41,47,64,67,94,117,169,178,195,198,],[33,53,53,53,53,90,90,145,90,90,90,90,]),'empty':([0,2,10,12,13,38,39,46,51,58,59,67,76,77,94,133,157,164,177,180,187,194,],[4,4,17,17,17,45,49,49,65,45,49,91,65,120,91,160,176,182,120,182,176,160,]),'formals':([40,41,47,],[55,57,62,]),'field_access':([67,77,94,104,105,106,125,127,129,132,133,136,139,148,149,152,166,169,174,177,178,194,195,198,],[92,121,92,121,121,121,121,121,121,121,92,121,121,121,121,121,121,92,121,121,92,92,92,92,]),'stmt':([67,94,169,178,195,198,],[94,94,185,189,197,199,]),'method_invocation':([67,77,94,104,105,106,125,127,129,132,133,136,139,148,149,152,166,169,174,177,178,194,195,198,],[89,119,89,119,119,119,119,119,119,119,89,119,119,119,119,119,119,89,119,119,89,89,89,89,]),'variable':([33,44,53,90,],[38,58,69,38,]),'stmt_star':([67,94,],[95,134,]),'array_expr_plus':([145,165,],[164,183,]),'more_variables':([38,58,],[43,73,]),'expr_opt':([77,177,],[118,188,]),'field_decl':([10,12,13,],[15,15,15,]),'method_decl':([10,12,13,],[19,19,19,]),'var_decl':([22,67,94,169,178,195,198,],[31,99,99,99,99,99,99,]),'assign':([67,77,94,106,125,127,129,132,133,136,139,148,149,152,166,169,174,177,178,194,195,198,],[108,126,108,126,126,126,126,126,108,126,126,126,126,126,126,108,126,126,108,108,108,108,]),'array_expr':([145,165,],[165,165,]),'stmt_expr_opt':([133,194,],[159,196,]),'lhs':([67,77,94,104,105,106,125,127,129,132,133,136,139,148,149,152,166,169,174,177,178,194,195,198,],[103,124,103,142,143,124,124,124,124,124,103,124,124,124,124,124,124,103,124,124,103,103,103,103,]),'more_expr':([157,187,],[175,193,]),'expr':([77,106,125,127,129,132,136,139,148,149,152,166,174,177,],[123,144,150,151,153,157,161,162,167,168,157,184,187,123,]),'modifier':([10,12,13,],[22,22,22,]),'class_decl_star':([0,2,],[5,6,]),'block':([52,56,61,67,70,72,75,94,169,178,195,198,],[68,71,74,109,111,112,113,109,109,109,109,109,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_decl_star','program',1,'p_program','decafparser.py',13),
  ('empty -> <empty>','empty',0,'p_empty','decafparser.py',19),
  ('class_decl_star -> empty','class_decl_star',1,'p_class_decl_star','decafparser.py',25),
  ('class_decl_star -> class_decl class_decl_star','class_decl_star',2,'p_class_decl_star','decafparser.py',26),
  ('class_decl -> CLASS ID LEFT_BRACE class_body_decl_plus RIGHT_BRACE','class_decl',5,'p_class_decl','decafparser.py',32),
  ('class_decl -> CLASS ID extends LEFT_BRACE class_body_decl_plus RIGHT_BRACE','class_decl',6,'p_class_decl','decafparser.py',33),
  ('extends -> EXTENDS ID','extends',2,'p_extends','decafparser.py',39),
  ('class_body_decl_plus -> class_body_decl','class_body_decl_plus',1,'p_class_body_decl_plus','decafparser.py',45),
  ('class_body_decl_plus -> class_body_decl class_body_decl_plus','class_body_decl_plus',2,'p_class_body_decl_plus','decafparser.py',46),
  ('class_body_decl -> field_decl','class_body_decl',1,'p_class_body_decl','decafparser.py',52),
  ('class_body_decl -> method_decl','class_body_decl',1,'p_class_body_decl','decafparser.py',53),
  ('class_body_decl -> constructor_decl','class_body_decl',1,'p_class_body_decl','decafparser.py',54),
  ('field_decl -> modifier var_decl','field_decl',2,'p_field_decl','decafparser.py',64),
  ('modifier -> empty','modifier',1,'p_modifier','decafparser.py',69),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','decafparser.py',70),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','decafparser.py',71),
  ('modifier -> PUBLIC STATIC','modifier',2,'p_modifier','decafparser.py',72),
  ('modifier -> PRIVATE STATIC','modifier',2,'p_modifier','decafparser.py',73),
  ('modifier -> STATIC','modifier',1,'p_modifier','decafparser.py',74),
  ('var_decl -> type variables SEMICOLON','var_decl',3,'p_var_decl','decafparser.py',80),
  ('type -> INT','type',1,'p_type','decafparser.py',85),
  ('type -> FLOAT','type',1,'p_type','decafparser.py',86),
  ('type -> BOOLEAN','type',1,'p_type','decafparser.py',87),
  ('type -> ID','type',1,'p_type','decafparser.py',88),
  ('variables -> variable more_variables','variables',2,'p_variables','decafparser.py',94),
  ('more_variables -> empty','more_variables',1,'p_more_variables','decafparser.py',100),
  ('more_variables -> COMMA variable more_variables','more_variables',3,'p_more_variables','decafparser.py',101),
  ('variable -> ID array_dim_star','variable',2,'p_variable','decafparser.py',107),
  ('array_dim_star -> empty','array_dim_star',1,'p_array_dim_star','decafparser.py',112),
  ('array_dim_star -> array_dim array_dim_star','array_dim_star',2,'p_array_dim_star','decafparser.py',113),
  ('array_dim -> LEFT_BRACKET RIGHT_BRACKET','array_dim',2,'p_array_dim','decafparser.py',118),
  ('method_decl -> modifier type ID LEFT_PAR formals RIGHT_PAR block','method_decl',7,'p_method_decl','decafparser.py',127),
  ('method_decl -> modifier type ID LEFT_PAR RIGHT_PAR block','method_decl',6,'p_method_decl','decafparser.py',128),
  ('method_decl -> modifier VOID ID LEFT_PAR formals RIGHT_PAR block','method_decl',7,'p_method_decl','decafparser.py',129),
  ('method_decl -> modifier VOID ID LEFT_PAR RIGHT_PAR block','method_decl',6,'p_method_decl','decafparser.py',130),
  ('constructor_decl -> modifier ID LEFT_PAR RIGHT_PAR block','constructor_decl',5,'p_constructor_decl','decafparser.py',135),
  ('constructor_decl -> modifier ID LEFT_PAR formals RIGHT_PAR block','constructor_decl',6,'p_constructor_decl','decafparser.py',136),
  ('formals -> formal_param more_formals','formals',2,'p_formals','decafparser.py',141),
  ('more_formals -> empty','more_formals',1,'p_more_formals','decafparser.py',146),
  ('more_formals -> COMMA formal_param more_formals','more_formals',3,'p_more_formals','decafparser.py',147),
  ('formal_param -> type variable','formal_param',2,'p_formal_param','decafparser.py',152),
  ('block -> LEFT_BRACE stmt_star RIGHT_BRACE','block',3,'p_block','decafparser.py',161),
  ('stmt_star -> empty','stmt_star',1,'p_stmt_star','decafparser.py',166),
  ('stmt_star -> stmt stmt_star','stmt_star',2,'p_stmt_star','decafparser.py',167),
  ('stmt -> IF LEFT_PAR expr RIGHT_PAR stmt','stmt',5,'p_stmt','decafparser.py',172),
  ('stmt -> IF LEFT_PAR expr RIGHT_PAR stmt ELSE stmt','stmt',7,'p_stmt','decafparser.py',173),
  ('stmt -> WHILE LEFT_PAR expr RIGHT_PAR stmt','stmt',5,'p_stmt','decafparser.py',174),
  ('stmt -> FOR LEFT_PAR stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RIGHT_PAR stmt','stmt',9,'p_stmt','decafparser.py',175),
  ('stmt -> RETURN expr_opt SEMICOLON','stmt',3,'p_stmt','decafparser.py',176),
  ('stmt -> stmt_expr SEMICOLON','stmt',2,'p_stmt','decafparser.py',177),
  ('stmt -> BREAK SEMICOLON','stmt',2,'p_stmt','decafparser.py',178),
  ('stmt -> CONTINUE SEMICOLON','stmt',2,'p_stmt','decafparser.py',179),
  ('stmt -> block','stmt',1,'p_stmt','decafparser.py',180),
  ('stmt -> var_decl','stmt',1,'p_stmt','decafparser.py',181),
  ('stmt -> SEMICOLON','stmt',1,'p_stmt','decafparser.py',182),
  ('literal -> INT_CONST','literal',1,'p_literal','decafparser.py',191),
  ('literal -> FLOAT_CONST','literal',1,'p_literal','decafparser.py',192),
  ('literal -> STRING_CONST','literal',1,'p_literal','decafparser.py',193),
  ('literal -> NULL','literal',1,'p_literal','decafparser.py',194),
  ('literal -> TRUE','literal',1,'p_literal','decafparser.py',195),
  ('literal -> FALSE','literal',1,'p_literal','decafparser.py',196),
  ('primary -> literal','primary',1,'p_primary','decafparser.py',201),
  ('primary -> THIS','primary',1,'p_primary','decafparser.py',202),
  ('primary -> SUPER','primary',1,'p_primary','decafparser.py',203),
  ('primary -> LEFT_PAR expr RIGHT_PAR','primary',3,'p_primary','decafparser.py',204),
  ('primary -> NEW ID LEFT_PAR RIGHT_PAR','primary',4,'p_primary','decafparser.py',205),
  ('primary -> NEW ID LEFT_PAR arguments RIGHT_PAR','primary',5,'p_primary','decafparser.py',206),
  ('primary -> lhs','primary',1,'p_primary','decafparser.py',207),
  ('primary -> method_invocation','primary',1,'p_primary','decafparser.py',208),
  ('arguments -> expr more_expr','arguments',2,'p_arguments','decafparser.py',213),
  ('more_expr -> empty','more_expr',1,'p_more_expr','decafparser.py',218),
  ('more_expr -> COMMA expr more_expr','more_expr',3,'p_more_expr','decafparser.py',219),
  ('lhs -> field_access','lhs',1,'p_lhs','decafparser.py',224),
  ('lhs -> array_access','lhs',1,'p_lhs','decafparser.py',225),
  ('field_access -> primary DOT ID','field_access',3,'p_field_access','decafparser.py',230),
  ('field_access -> ID','field_access',1,'p_field_access','decafparser.py',231),
  ('array_access -> primary LEFT_BRACKET expr RIGHT_BRACKET','array_access',4,'p_array_access','decafparser.py',236),
  ('method_invocation -> field_access LEFT_PAR RIGHT_PAR','method_invocation',3,'p_method_invocation','decafparser.py',241),
  ('method_invocation -> field_access LEFT_PAR arguments RIGHT_PAR','method_invocation',4,'p_method_invocation','decafparser.py',242),
  ('expr -> primary','expr',1,'p_expr','decafparser.py',247),
  ('expr -> assign','expr',1,'p_expr','decafparser.py',248),
  ('expr -> new_array','expr',1,'p_expr','decafparser.py',249),
  ('expr -> expr ARITH_OP expr','expr',3,'p_expr','decafparser.py',250),
  ('expr -> expr BOOL_OP expr','expr',3,'p_expr','decafparser.py',251),
  ('expr -> UNARY_OP expr','expr',2,'p_expr','decafparser.py',252),
  ('assign -> lhs EQUALS expr','assign',3,'p_assign','decafparser.py',257),
  ('assign -> lhs PLUS_PLUS','assign',2,'p_assign','decafparser.py',258),
  ('assign -> PLUS_PLUS lhs','assign',2,'p_assign','decafparser.py',259),
  ('assign -> lhs MINUS_MINUS','assign',2,'p_assign','decafparser.py',260),
  ('assign -> MINUS_MINUS lhs','assign',2,'p_assign','decafparser.py',261),
  ('new_array -> NEW type array_expr_plus array_empty_star','new_array',4,'p_new_array','decafparser.py',266),
  ('array_expr_plus -> array_expr','array_expr_plus',1,'p_array_expr_plus','decafparser.py',271),
  ('array_expr_plus -> array_expr array_expr_plus','array_expr_plus',2,'p_array_expr_plus','decafparser.py',272),
  ('array_expr -> LEFT_BRACKET expr RIGHT_BRACKET','array_expr',3,'p_array_expr','decafparser.py',277),
  ('array_empty_star -> empty','array_empty_star',1,'p_array_empty_star','decafparser.py',282),
  ('array_empty_star -> array_empty array_empty_star','array_empty_star',2,'p_array_empty_star','decafparser.py',283),
  ('array_empty -> LEFT_BRACKET RIGHT_BRACKET','array_empty',2,'p_array_empty','decafparser.py',288),
  ('stmt_expr -> assign','stmt_expr',1,'p_stmt_expr','decafparser.py',293),
  ('stmt_expr -> method_invocation','stmt_expr',1,'p_stmt_expr','decafparser.py',294),
  ('stmt_expr_opt -> empty','stmt_expr_opt',1,'p_stmt_expr_opt','decafparser.py',299),
  ('stmt_expr_opt -> stmt_expr','stmt_expr_opt',1,'p_stmt_expr_opt','decafparser.py',300),
  ('expr_opt -> empty','expr_opt',1,'p_expr_opt','decafparser.py',305),
  ('expr_opt -> expr','expr_opt',1,'p_expr_opt','decafparser.py',306),
]
