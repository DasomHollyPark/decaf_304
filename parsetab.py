
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '73AA6C60514355E9DA1737BF8FF084E0'
    
_lr_action_items = {'ARITH_OP':([79,80,81,82,84,86,97,100,106,109,110,111,114,116,117,118,119,121,135,136,137,138,139,145,146,151,155,156,157,158,159,160,161,163,164,167,172,174,175,177,178,179,181,182,185,186,187,],[-60,-76,-59,-57,-61,-63,-62,-64,-65,-58,-83,-81,-69,-75,-78,143,-68,-82,-88,-90,-91,-89,143,143,143,143,143,-77,143,143,-66,-2,-94,143,143,-80,-79,-92,-2,-96,-93,143,-67,143,-97,-98,-95,]),'RETURN':([41,72,83,92,98,108,124,130,132,133,142,165,173,180,184,190,191,192,194,195,196,],[-21,76,-54,76,-53,-52,-49,-42,-50,-51,-48,76,76,-46,-2,76,-45,-55,-56,76,-47,]),'VOID':([13,14,15,16,17,19,20,21,22,23,25,30,34,41,71,73,74,130,],[-2,-13,-20,-2,-17,-15,-11,-12,29,-16,-19,-14,-18,-21,-35,-34,-33,-42,]),'RIGHT_BRACE':([14,16,18,20,21,24,30,41,71,72,73,74,83,89,92,94,98,108,124,127,130,132,133,142,180,184,191,192,194,196,],[-13,-9,26,-11,-12,-10,-14,-21,-35,-2,-34,-33,-54,-43,-2,130,-53,-52,-49,-44,-42,-50,-51,-48,-46,-2,-45,-55,-56,-47,]),'RIGHT_BRACKET':([49,79,80,81,82,84,86,97,100,106,109,110,111,114,116,117,119,121,135,136,137,138,145,155,156,158,159,160,161,163,164,167,172,174,175,176,177,178,179,181,185,186,187,],[61,-60,-76,-59,-57,-61,-63,-62,-64,-65,-58,-83,-81,-69,-75,-78,-68,-82,-88,-90,-91,-89,-86,172,-77,-87,-66,-2,-94,-84,-85,-80,-79,-92,-2,186,-96,-93,187,-67,-97,-98,-95,]),'WHILE':([41,72,83,92,98,108,124,130,132,133,142,165,173,180,184,190,191,192,194,195,196,],[-21,77,-54,77,-53,-52,-49,-42,-50,-51,-48,77,77,-46,-2,77,-45,-55,-56,77,-47,]),'STATIC':([13,14,16,17,20,21,23,30,41,71,73,74,130,],[15,-13,15,25,-11,-12,34,-14,-21,-35,-34,-33,-42,]),'FLOAT_CONST':([41,72,76,83,92,98,103,104,105,108,120,122,124,125,126,128,130,131,132,133,134,142,143,144,147,162,165,168,171,173,180,184,189,190,191,192,194,195,196,],[-21,109,109,-54,109,-53,109,109,109,-52,109,109,-49,109,109,109,-42,109,-50,-51,109,-48,109,109,109,109,109,109,109,109,-46,-2,109,109,-45,-55,-56,109,-47,]),'NEW':([41,72,76,83,92,98,103,104,105,108,120,122,124,125,126,128,130,131,132,133,134,142,143,144,147,162,165,168,171,173,180,184,189,190,191,192,194,195,196,],[-21,78,112,-54,78,-53,78,78,112,-52,112,112,-49,112,78,112,-42,112,-50,-51,112,-48,112,112,112,112,78,112,112,78,-46,-2,78,78,-45,-55,-56,78,-47,]),'NULL':([41,72,76,83,92,98,103,104,105,108,120,122,124,125,126,128,130,131,132,133,134,142,143,144,147,162,165,168,171,173,180,184,189,190,191,192,194,195,196,],[-21,79,79,-54,79,-53,79,79,79,-52,79,79,-49,79,79,79,-42,79,-50,-51,79,-48,79,79,79,79,79,79,79,79,-46,-2,79,79,-45,-55,-56,79,-47,]),'TRUE':([41,72,76,83,92,98,103,104,105,108,120,122,124,125,126,128,130,131,132,133,134,142,143,144,147,162,165,168,171,173,180,184,189,190,191,192,194,195,196,],[-21,84,84,-54,84,-53,84,84,84,-52,84,84,-49,84,84,84,-42,84,-50,-51,84,-48,84,84,84,84,84,84,84,84,-46,-2,84,84,-45,-55,-56,84,-47,]),'DOT':([79,80,81,82,84,86,87,90,93,95,97,100,102,106,109,111,114,116,117,119,137,138,156,159,167,172,181,],[-60,-76,-59,-57,-61,-63,-69,-75,129,-78,-62,-64,-68,-65,-58,129,-69,-75,-78,-68,-68,-68,-77,-66,-80,-79,-67,]),'STRING_CONST':([41,72,76,83,92,98,103,104,105,108,120,122,124,125,126,128,130,131,132,133,134,142,143,144,147,162,165,168,171,173,180,184,189,190,191,192,194,195,196,],[-21,81,81,-54,81,-53,81,81,81,-52,81,81,-49,81,81,81,-42,81,-50,-51,81,-48,81,81,81,81,81,81,81,81,-46,-2,81,81,-45,-55,-56,81,-47,]),'INT_CONST':([41,72,76,83,92,98,103,104,105,108,120,122,124,125,126,128,130,131,132,133,134,142,143,144,147,162,165,168,171,173,180,184,189,190,191,192,194,195,196,],[-21,82,82,-54,82,-53,82,82,82,-52,82,82,-49,82,82,82,-42,82,-50,-51,82,-48,82,82,82,82,82,82,82,82,-46,-2,82,82,-45,-55,-56,82,-47,]),'SEMICOLON':([36,37,38,41,42,44,45,47,48,57,58,59,61,68,72,76,79,80,81,82,83,84,85,86,87,92,97,98,99,100,101,106,107,108,109,110,111,113,114,115,116,117,118,119,121,124,126,130,132,133,135,136,137,138,142,145,152,153,154,156,158,159,160,161,163,164,165,167,171,172,173,174,175,177,178,180,181,183,184,185,186,187,190,191,192,194,195,196,],[41,-2,-2,-21,-26,-27,-2,-29,-30,-2,-2,-31,-32,-28,83,-2,-60,-76,-59,-57,-54,-61,124,-63,-100,83,-62,-53,132,-64,133,-65,-99,-52,-58,-83,-81,142,-69,-103,-75,-78,-104,-68,-82,-49,-2,-42,-50,-51,-88,-90,-91,-89,-48,-86,-102,171,-101,-77,-87,-66,-2,-94,-84,-85,83,-80,-2,-79,83,-92,-2,-96,-93,-46,-67,189,-2,-97,-98,-95,83,-45,-55,-56,83,-47,]),'PRIVATE':([13,14,16,20,21,30,41,71,73,74,130,],[17,-13,17,-11,-12,-14,-21,-35,-34,-33,-42,]),'BOOL_OP':([79,80,81,82,84,86,97,100,106,109,110,111,114,116,117,118,119,121,135,136,137,138,139,145,146,151,155,156,157,158,159,160,161,163,164,167,172,174,175,177,178,179,181,182,185,186,187,],[-60,-76,-59,-57,-61,-63,-62,-64,-65,-58,-83,-81,-69,-75,-78,144,-68,-82,-88,-90,-91,-89,144,144,144,144,144,-77,144,144,-66,-2,-94,144,144,-80,-79,-92,-2,-96,-93,144,-67,144,-97,-98,-95,]),'CONTINUE':([41,72,83,92,98,108,124,130,132,133,142,165,173,180,184,190,191,192,194,195,196,],[-21,101,-54,101,-53,-52,-49,-42,-50,-51,-48,101,101,-46,-2,101,-45,-55,-56,101,-47,]),'COMMA':([37,38,45,47,48,50,57,58,59,61,66,70,79,80,81,82,84,86,97,100,106,109,110,111,114,116,117,119,121,135,136,137,138,145,151,156,158,159,160,161,163,164,167,172,174,175,177,178,181,182,185,186,187,],[43,-2,-2,-29,-30,62,43,-2,-31,-32,-41,62,-60,-76,-59,-57,-61,-63,-62,-64,-65,-58,-83,-81,-69,-75,-78,-68,-82,-88,-90,-91,-89,-86,168,-77,-87,-66,-2,-94,-84,-85,-80,-79,-92,-2,-96,-93,-67,168,-97,-98,-95,]),'CLASS':([0,2,26,],[3,3,-5,]),'MINUS_MINUS':([41,72,76,80,83,90,92,95,98,102,105,108,116,117,119,120,122,124,125,126,128,130,131,132,133,134,142,143,144,147,156,162,165,168,171,172,173,180,184,189,190,191,192,194,195,196,],[-21,103,103,-76,-54,-75,103,-78,-53,136,103,-52,-75,-78,136,103,103,-49,103,103,103,-42,103,-50,-51,103,-48,103,103,103,-77,103,103,103,103,-79,103,-46,-2,103,103,-45,-55,-56,103,-47,]),'$end':([0,1,2,4,5,6,26,],[-2,0,-2,-3,-1,-4,-5,]),'FOR':([41,72,83,92,98,108,124,130,132,133,142,165,173,180,184,190,191,192,194,195,196,],[-21,91,-54,91,-53,-52,-49,-42,-50,-51,-48,91,91,-46,-2,91,-45,-55,-56,91,-47,]),'EQUALS':([80,90,95,102,116,117,119,156,172,],[-76,-75,-78,134,-75,-78,134,-77,-79,]),'ELSE':([41,83,98,108,124,130,132,133,142,180,184,191,192,194,196,],[-21,-54,-53,-52,-49,-42,-50,-51,-48,-46,190,-45,-55,-56,-47,]),'EXTENDS':([7,],[8,]),'RIGHT_PAR':([39,40,45,46,47,48,50,51,52,55,56,58,59,60,61,63,64,66,70,75,79,80,81,82,84,86,87,97,100,106,107,109,110,111,114,116,117,119,121,125,135,136,137,138,139,145,146,147,148,149,150,151,152,154,156,157,158,159,160,161,163,164,166,167,169,170,172,174,175,177,178,181,182,185,186,187,188,189,193,],[-2,-2,-2,-2,-29,-30,-2,-36,65,-37,67,-2,-31,69,-32,-39,-38,-41,-2,-40,-60,-76,-59,-57,-61,-63,-100,-62,-64,-65,-99,-58,-83,-81,-69,-75,-78,-68,-82,-2,-88,-90,-91,-89,159,-86,165,-2,-71,-70,167,-2,-102,-101,-77,173,-87,-66,-2,-94,-84,-85,181,-80,-72,-73,-79,-92,-2,-96,-93,-67,-2,-97,-98,-95,-74,-2,195,]),'ID':([3,8,13,14,15,16,17,19,20,21,22,23,25,27,28,29,30,31,32,33,34,39,40,41,43,46,53,54,62,71,72,73,74,76,78,83,88,92,95,98,103,104,105,108,112,120,122,124,125,126,128,129,130,131,132,133,134,142,143,144,147,162,165,168,171,173,180,184,189,190,191,192,194,195,196,],[7,12,-2,-13,-20,-2,-17,-15,-11,-12,33,-16,-19,-23,-22,35,-14,-24,38,-25,-18,54,54,-21,58,54,58,-25,54,-35,95,-34,-33,117,123,-54,58,95,-25,-53,117,117,117,-52,141,117,117,-49,117,117,117,156,-42,117,-50,-51,117,-48,117,117,117,117,95,117,117,95,-46,-2,117,95,-45,-55,-56,95,-47,]),'IF':([41,72,83,92,98,108,124,130,132,133,142,165,173,180,184,190,191,192,194,195,196,],[-21,96,-54,96,-53,-52,-49,-42,-50,-51,-48,96,96,-46,-2,96,-45,-55,-56,96,-47,]),'FALSE':([41,72,76,83,92,98,103,104,105,108,120,122,124,125,126,128,130,131,132,133,134,142,143,144,147,162,165,168,171,173,180,184,189,190,191,192,194,195,196,],[-21,97,97,-54,97,-53,97,97,97,-52,97,97,-49,97,97,97,-42,97,-50,-51,97,-48,97,97,97,97,97,97,97,97,-46,-2,97,97,-45,-55,-56,97,-47,]),'INT':([13,14,15,16,17,19,20,21,22,23,25,30,34,39,40,41,46,62,71,72,73,74,83,92,98,108,112,124,130,132,133,142,165,173,180,184,190,191,192,194,195,196,],[-2,-13,-20,-2,-17,-15,-11,-12,28,-16,-19,-14,-18,28,28,-21,28,28,-35,28,-34,-33,-54,28,-53,-52,28,-49,-42,-50,-51,-48,28,28,-46,-2,28,-45,-55,-56,28,-47,]),'FLOAT':([13,14,15,16,17,19,20,21,22,23,25,30,34,39,40,41,46,62,71,72,73,74,83,92,98,108,112,124,130,132,133,142,165,173,180,184,190,191,192,194,195,196,],[-2,-13,-20,-2,-17,-15,-11,-12,27,-16,-19,-14,-18,27,27,-21,27,27,-35,27,-34,-33,-54,27,-53,-52,27,-49,-42,-50,-51,-48,27,27,-46,-2,27,-45,-55,-56,27,-47,]),'BREAK':([41,72,83,92,98,108,124,130,132,133,142,165,173,180,184,190,191,192,194,195,196,],[-21,99,-54,99,-53,-52,-49,-42,-50,-51,-48,99,99,-46,-2,99,-45,-55,-56,99,-47,]),'THIS':([41,72,76,83,92,98,103,104,105,108,120,122,124,125,126,128,130,131,132,133,134,142,143,144,147,162,165,168,171,173,180,184,189,190,191,192,194,195,196,],[-21,100,100,-54,100,-53,100,100,100,-52,100,100,-49,100,100,100,-42,100,-50,-51,100,-48,100,100,100,100,100,100,100,100,-46,-2,100,100,-45,-55,-56,100,-47,]),'BOOLEAN':([13,14,15,16,17,19,20,21,22,23,25,30,34,39,40,41,46,62,71,72,73,74,83,92,98,108,112,124,130,132,133,142,165,173,180,184,190,191,192,194,195,196,],[-2,-13,-20,-2,-17,-15,-11,-12,31,-16,-19,-14,-18,31,31,-21,31,31,-35,31,-34,-33,-54,31,-53,-52,31,-49,-42,-50,-51,-48,31,31,-46,-2,31,-45,-55,-56,31,-47,]),'UNARY_OP':([76,105,120,122,125,128,131,134,143,144,147,162,168,171,],[120,120,120,120,120,120,120,120,120,120,120,120,120,120,]),'PLUS_PLUS':([41,72,76,80,83,90,92,95,98,102,105,108,116,117,119,120,122,124,125,126,128,130,131,132,133,134,142,143,144,147,156,162,165,168,171,172,173,180,184,189,190,191,192,194,195,196,],[-21,104,104,-76,-54,-75,104,-78,-53,135,104,-52,-75,-78,135,104,104,-49,104,104,104,-42,104,-50,-51,104,-48,104,104,104,-77,104,104,104,104,-79,104,-46,-2,104,104,-45,-55,-56,104,-47,]),'LEFT_PAR':([33,35,38,41,72,76,77,83,90,91,92,95,96,98,103,104,105,108,116,117,120,122,123,124,125,126,128,130,131,132,133,134,141,142,143,144,147,156,162,165,168,171,173,180,184,189,190,191,192,194,195,196,],[39,40,46,-21,105,105,122,-54,125,126,105,-78,131,-53,105,105,105,-52,125,-78,105,105,147,-49,105,105,105,-42,105,-50,-51,105,147,-48,105,105,105,-77,105,105,105,105,105,-46,-2,105,105,-45,-55,-56,105,-47,]),'LEFT_BRACKET':([27,28,31,38,45,58,61,79,80,81,82,84,86,87,90,93,95,97,100,102,106,109,111,114,116,117,119,137,138,140,141,156,159,160,161,167,172,175,178,181,186,187,],[-23,-22,-24,49,49,49,-32,-60,-76,-59,-57,-61,-63,-69,-75,128,-78,-62,-64,-68,-65,-58,128,-69,-75,-78,-68,-68,-68,162,-25,-77,-66,176,162,-80,-79,176,-93,-67,-98,-95,]),'SUPER':([41,72,76,83,92,98,103,104,105,108,120,122,124,125,126,128,130,131,132,133,134,142,143,144,147,162,165,168,171,173,180,184,189,190,191,192,194,195,196,],[-21,106,106,-54,106,-53,106,106,106,-52,106,106,-49,106,106,106,-42,106,-50,-51,106,-48,106,106,106,106,106,106,106,106,-46,-2,106,106,-45,-55,-56,106,-47,]),'PUBLIC':([13,14,16,20,21,30,41,71,73,74,130,],[23,-13,23,-11,-12,-14,-21,-35,-34,-33,-42,]),'LEFT_BRACE':([7,9,10,11,12,41,65,67,69,72,83,92,98,108,124,130,132,133,142,165,173,180,184,190,191,192,194,195,196,],[-2,13,-7,-6,-8,-21,72,72,72,72,-54,72,-53,-52,-49,-42,-50,-51,-48,72,72,-46,-2,72,-45,-55,-56,72,-47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'new_array':([76,105,120,122,125,128,131,134,143,144,147,162,168,171,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'array_empty_star':([160,175,],[174,185,]),'array_dim':([38,45,58,],[45,45,45,]),'variables':([32,88,],[36,36,]),'constructor_decl':([13,16,],[14,14,]),'primary':([72,76,92,103,104,105,120,122,125,126,128,131,134,143,144,147,162,165,168,171,173,189,190,195,],[93,111,93,93,93,111,111,111,111,93,111,111,111,111,111,111,111,93,111,111,93,93,93,93,]),'array_dim_star':([38,45,58,],[47,59,47,]),'else_opt':([184,],[191,]),'array_access':([72,76,92,103,104,105,120,122,125,126,128,131,134,143,144,147,162,165,168,171,173,189,190,195,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'formal_param':([39,40,46,62,],[50,50,50,70,]),'class_body_decl':([13,16,],[16,16,]),'arguments':([125,147,],[148,148,]),'array_empty':([160,175,],[175,175,]),'more_formals':([50,70,],[64,75,]),'stmt_expr':([72,92,126,165,173,189,190,195,],[85,85,152,85,85,152,85,85,]),'literal':([72,76,92,103,104,105,120,122,125,126,128,131,134,143,144,147,162,165,168,171,173,189,190,195,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'program':([0,],[1,]),'extends':([7,],[10,]),'class_decl':([0,2,],[2,2,]),'class_body_decl_plus':([13,16,],[18,24,]),'type':([22,39,40,46,62,72,92,112,165,173,190,195,],[32,53,53,53,53,88,88,140,88,88,88,88,]),'empty':([0,2,7,13,16,37,38,39,40,45,46,50,57,58,70,72,76,92,125,126,147,151,160,171,175,182,184,189,],[4,4,11,19,19,44,48,51,51,48,51,63,44,48,63,89,115,89,149,154,149,170,177,115,177,170,192,154,]),'formals':([39,40,46,],[55,55,55,]),'field_access':([72,76,92,103,104,105,120,122,125,126,128,131,134,143,144,147,162,165,168,171,173,189,190,195,],[90,116,90,116,116,116,116,116,116,90,116,116,116,116,116,116,116,90,116,116,90,90,90,90,]),'stmt':([72,92,165,173,190,195,],[92,92,180,184,194,196,]),'arguments_opt':([125,147,],[150,166,]),'method_invocation':([72,76,92,103,104,105,120,122,125,126,128,131,134,143,144,147,162,165,168,171,173,189,190,195,],[87,114,87,114,114,114,114,114,114,87,114,114,114,114,114,114,114,87,114,114,87,87,87,87,]),'variable':([32,43,53,88,],[37,57,66,37,]),'stmt_star':([72,92,],[94,127,]),'array_expr_plus':([140,161,],[160,178,]),'more_variables':([37,57,],[42,68,]),'expr_opt':([76,171,],[113,183,]),'field_decl':([13,16,],[20,20,]),'extends_opt':([7,],[9,]),'method_decl':([13,16,],[21,21,]),'var_decl':([22,72,92,165,173,190,195,],[30,98,98,98,98,98,98,]),'assign':([72,76,92,105,120,122,125,126,128,131,134,143,144,147,162,165,168,171,173,189,190,195,],[107,121,107,121,121,121,121,107,121,121,121,121,121,121,121,107,121,121,107,107,107,107,]),'array_expr':([140,161,],[161,161,]),'stmt_expr_opt':([126,189,],[153,193,]),'lhs':([72,76,92,103,104,105,120,122,125,126,128,131,134,143,144,147,162,165,168,171,173,189,190,195,],[102,119,102,137,138,119,119,119,119,102,119,119,119,119,119,119,119,102,119,119,102,102,102,102,]),'formals_opt':([39,40,46,],[52,56,60,]),'more_expr':([151,182,],[169,188,]),'expr':([76,105,120,122,125,128,131,134,143,144,147,162,168,171,],[118,139,145,146,151,155,157,158,163,164,151,179,182,118,]),'modifier':([13,16,],[22,22,]),'class_decl_star':([0,2,],[5,6,]),'block':([65,67,69,72,92,165,173,190,195,],[71,73,74,108,108,108,108,108,108,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> class_decl_star','program',1,'p_program','decafparser.py',13),
  ('empty -> <empty>','empty',0,'p_empty','decafparser.py',19),
  ('class_decl_star -> empty','class_decl_star',1,'p_class_decl_star','decafparser.py',25),
  ('class_decl_star -> class_decl class_decl_star','class_decl_star',2,'p_class_decl_star','decafparser.py',26),
  ('class_decl -> CLASS ID extends_opt LEFT_BRACE class_body_decl_plus RIGHT_BRACE','class_decl',6,'p_class_decl','decafparser.py',32),
  ('extends_opt -> empty','extends_opt',1,'p_extends_opt','decafparser.py',38),
  ('extends_opt -> extends','extends_opt',1,'p_extends_opt','decafparser.py',39),
  ('extends -> EXTENDS ID','extends',2,'p_extends','decafparser.py',45),
  ('class_body_decl_plus -> class_body_decl','class_body_decl_plus',1,'p_class_body_decl_plus','decafparser.py',51),
  ('class_body_decl_plus -> class_body_decl class_body_decl_plus','class_body_decl_plus',2,'p_class_body_decl_plus','decafparser.py',52),
  ('class_body_decl -> field_decl','class_body_decl',1,'p_class_body_decl','decafparser.py',58),
  ('class_body_decl -> method_decl','class_body_decl',1,'p_class_body_decl','decafparser.py',59),
  ('class_body_decl -> constructor_decl','class_body_decl',1,'p_class_body_decl','decafparser.py',60),
  ('field_decl -> modifier var_decl','field_decl',2,'p_field_decl','decafparser.py',70),
  ('modifier -> empty','modifier',1,'p_modifier','decafparser.py',75),
  ('modifier -> PUBLIC','modifier',1,'p_modifier','decafparser.py',76),
  ('modifier -> PRIVATE','modifier',1,'p_modifier','decafparser.py',77),
  ('modifier -> PUBLIC STATIC','modifier',2,'p_modifier','decafparser.py',78),
  ('modifier -> PRIVATE STATIC','modifier',2,'p_modifier','decafparser.py',79),
  ('modifier -> STATIC','modifier',1,'p_modifier','decafparser.py',80),
  ('var_decl -> type variables SEMICOLON','var_decl',3,'p_var_decl','decafparser.py',86),
  ('type -> INT','type',1,'p_type','decafparser.py',91),
  ('type -> FLOAT','type',1,'p_type','decafparser.py',92),
  ('type -> BOOLEAN','type',1,'p_type','decafparser.py',93),
  ('type -> ID','type',1,'p_type','decafparser.py',94),
  ('variables -> variable more_variables','variables',2,'p_variables','decafparser.py',100),
  ('more_variables -> empty','more_variables',1,'p_more_variables','decafparser.py',106),
  ('more_variables -> COMMA variable more_variables','more_variables',3,'p_more_variables','decafparser.py',107),
  ('variable -> ID array_dim_star','variable',2,'p_variable','decafparser.py',113),
  ('array_dim_star -> empty','array_dim_star',1,'p_array_dim_star','decafparser.py',118),
  ('array_dim_star -> array_dim array_dim_star','array_dim_star',2,'p_array_dim_star','decafparser.py',119),
  ('array_dim -> LEFT_BRACKET RIGHT_BRACKET','array_dim',2,'p_array_dim','decafparser.py',124),
  ('method_decl -> modifier type ID LEFT_PAR formals_opt RIGHT_PAR block','method_decl',7,'p_method_decl','decafparser.py',133),
  ('method_decl -> modifier VOID ID LEFT_PAR formals_opt RIGHT_PAR block','method_decl',7,'p_method_decl','decafparser.py',134),
  ('constructor_decl -> modifier ID LEFT_PAR formals_opt RIGHT_PAR block','constructor_decl',6,'p_constructor_decl','decafparser.py',139),
  ('formals_opt -> empty','formals_opt',1,'p_formals_opt','decafparser.py',144),
  ('formals_opt -> formals','formals_opt',1,'p_formals_opt','decafparser.py',145),
  ('formals -> formal_param more_formals','formals',2,'p_formals','decafparser.py',150),
  ('more_formals -> empty','more_formals',1,'p_more_formals','decafparser.py',155),
  ('more_formals -> COMMA formal_param more_formals','more_formals',3,'p_more_formals','decafparser.py',156),
  ('formal_param -> type variable','formal_param',2,'p_formal_param','decafparser.py',161),
  ('block -> LEFT_BRACE stmt_star RIGHT_BRACE','block',3,'p_block','decafparser.py',170),
  ('stmt_star -> empty','stmt_star',1,'p_stmt_star','decafparser.py',175),
  ('stmt_star -> stmt stmt_star','stmt_star',2,'p_stmt_star','decafparser.py',176),
  ('stmt -> IF LEFT_PAR expr RIGHT_PAR stmt else_opt','stmt',6,'p_stmt','decafparser.py',181),
  ('stmt -> WHILE LEFT_PAR expr RIGHT_PAR stmt','stmt',5,'p_stmt','decafparser.py',182),
  ('stmt -> FOR LEFT_PAR stmt_expr_opt SEMICOLON expr_opt SEMICOLON stmt_expr_opt RIGHT_PAR stmt','stmt',9,'p_stmt','decafparser.py',183),
  ('stmt -> RETURN expr_opt SEMICOLON','stmt',3,'p_stmt','decafparser.py',184),
  ('stmt -> stmt_expr SEMICOLON','stmt',2,'p_stmt','decafparser.py',185),
  ('stmt -> BREAK SEMICOLON','stmt',2,'p_stmt','decafparser.py',186),
  ('stmt -> CONTINUE SEMICOLON','stmt',2,'p_stmt','decafparser.py',187),
  ('stmt -> block','stmt',1,'p_stmt','decafparser.py',188),
  ('stmt -> var_decl','stmt',1,'p_stmt','decafparser.py',189),
  ('stmt -> SEMICOLON','stmt',1,'p_stmt','decafparser.py',190),
  ('else_opt -> empty','else_opt',1,'p_else_opt','decafparser.py',195),
  ('else_opt -> ELSE stmt','else_opt',2,'p_else_opt','decafparser.py',196),
  ('literal -> INT_CONST','literal',1,'p_literal','decafparser.py',205),
  ('literal -> FLOAT_CONST','literal',1,'p_literal','decafparser.py',206),
  ('literal -> STRING_CONST','literal',1,'p_literal','decafparser.py',207),
  ('literal -> NULL','literal',1,'p_literal','decafparser.py',208),
  ('literal -> TRUE','literal',1,'p_literal','decafparser.py',209),
  ('literal -> FALSE','literal',1,'p_literal','decafparser.py',210),
  ('primary -> literal','primary',1,'p_primary','decafparser.py',215),
  ('primary -> THIS','primary',1,'p_primary','decafparser.py',216),
  ('primary -> SUPER','primary',1,'p_primary','decafparser.py',217),
  ('primary -> LEFT_PAR expr RIGHT_PAR','primary',3,'p_primary','decafparser.py',218),
  ('primary -> NEW ID LEFT_PAR arguments_opt RIGHT_PAR','primary',5,'p_primary','decafparser.py',219),
  ('primary -> lhs','primary',1,'p_primary','decafparser.py',220),
  ('primary -> method_invocation','primary',1,'p_primary','decafparser.py',221),
  ('arguments_opt -> empty','arguments_opt',1,'p_arguments_opt','decafparser.py',226),
  ('arguments_opt -> arguments','arguments_opt',1,'p_arguments_opt','decafparser.py',227),
  ('arguments -> expr more_expr','arguments',2,'p_arguments','decafparser.py',232),
  ('more_expr -> empty','more_expr',1,'p_more_expr','decafparser.py',237),
  ('more_expr -> COMMA expr more_expr','more_expr',3,'p_more_expr','decafparser.py',238),
  ('lhs -> field_access','lhs',1,'p_lhs','decafparser.py',243),
  ('lhs -> array_access','lhs',1,'p_lhs','decafparser.py',244),
  ('field_access -> primary DOT ID','field_access',3,'p_field_access','decafparser.py',249),
  ('field_access -> ID','field_access',1,'p_field_access','decafparser.py',250),
  ('array_access -> primary LEFT_BRACKET expr RIGHT_BRACKET','array_access',4,'p_array_access','decafparser.py',255),
  ('method_invocation -> field_access LEFT_PAR arguments_opt RIGHT_PAR','method_invocation',4,'p_method_invocation','decafparser.py',260),
  ('expr -> primary','expr',1,'p_expr','decafparser.py',265),
  ('expr -> assign','expr',1,'p_expr','decafparser.py',266),
  ('expr -> new_array','expr',1,'p_expr','decafparser.py',267),
  ('expr -> expr ARITH_OP expr','expr',3,'p_expr','decafparser.py',268),
  ('expr -> expr BOOL_OP expr','expr',3,'p_expr','decafparser.py',269),
  ('expr -> UNARY_OP expr','expr',2,'p_expr','decafparser.py',270),
  ('assign -> lhs EQUALS expr','assign',3,'p_assign','decafparser.py',275),
  ('assign -> lhs PLUS_PLUS','assign',2,'p_assign','decafparser.py',276),
  ('assign -> PLUS_PLUS lhs','assign',2,'p_assign','decafparser.py',277),
  ('assign -> lhs MINUS_MINUS','assign',2,'p_assign','decafparser.py',278),
  ('assign -> MINUS_MINUS lhs','assign',2,'p_assign','decafparser.py',279),
  ('new_array -> NEW type array_expr_plus array_empty_star','new_array',4,'p_new_array','decafparser.py',284),
  ('array_expr_plus -> array_expr array_expr_plus','array_expr_plus',2,'p_array_expr_plus','decafparser.py',289),
  ('array_expr_plus -> array_expr','array_expr_plus',1,'p_array_expr_plus','decafparser.py',290),
  ('array_expr -> LEFT_BRACKET expr RIGHT_BRACKET','array_expr',3,'p_array_expr','decafparser.py',295),
  ('array_empty_star -> empty','array_empty_star',1,'p_array_empty_star','decafparser.py',300),
  ('array_empty_star -> array_empty array_empty_star','array_empty_star',2,'p_array_empty_star','decafparser.py',301),
  ('array_empty -> LEFT_BRACKET RIGHT_BRACKET','array_empty',2,'p_array_empty','decafparser.py',306),
  ('stmt_expr -> assign','stmt_expr',1,'p_stmt_expr','decafparser.py',311),
  ('stmt_expr -> method_invocation','stmt_expr',1,'p_stmt_expr','decafparser.py',312),
  ('stmt_expr_opt -> empty','stmt_expr_opt',1,'p_stmt_expr_opt','decafparser.py',317),
  ('stmt_expr_opt -> stmt_expr','stmt_expr_opt',1,'p_stmt_expr_opt','decafparser.py',318),
  ('expr_opt -> empty','expr_opt',1,'p_expr_opt','decafparser.py',323),
  ('expr_opt -> expr','expr_opt',1,'p_expr_opt','decafparser.py',324),
]
